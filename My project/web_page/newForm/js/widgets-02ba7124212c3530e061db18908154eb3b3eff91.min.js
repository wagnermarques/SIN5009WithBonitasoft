
(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbTitle',function(){return{template:'<h1 ng-if="\'Level 1\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h1>\n<h2 ng-if="\'Level 2\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h2>\n<h3 ng-if="\'Level 3\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h3>\n<h4 ng-if="\'Level 4\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h4>\n<h5 ng-if="\'Level 5\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h5>\n<h6 ng-if="\'Level 6\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h6>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbSelect',function(){return{controllerAs:'ctrl',controller:function PbSelectCtrl($scope,$parse,$log,widgetNameFactory,$timeout,$window,$element){var ctrl=this;function comparator(initialValue,item){return angular.equals(initialValue,ctrl.getValue(item));}
function createGetter(accessor){return accessor&&$parse(accessor);}
this.getLabel=createGetter($scope.properties.displayedKey)||function(item){return typeof item==='string'?item:JSON.stringify(item);};this.getValue=createGetter($scope.properties.returnedKey)||function(item){return item;};this.findSelectedItem=function(items){return items.filter(comparator.bind(null,$scope.properties.value)).map(function(item){return ctrl.getValue(item);})[0];};this.setSelectedValue=function(foundItem){$timeout(function(){$scope.properties.value=angular.isDefined(foundItem)?foundItem:null;},0);};$scope.$watchCollection('properties.availableValues',function(items){if(Array.isArray(items)){var foundItem=ctrl.findSelectedItem(items);if($window.navigator&&$window.navigator.userAgent&&$window.navigator.userAgent.indexOf('MSIE 9')>=0){var option=document.createElement('option');var select=$element.find('select')[0];select.add(option,null);select.remove(select.options.length-1);}
$scope.properties.value=undefined;ctrl.setSelectedValue(foundItem);}});$scope.$watch('properties.value',function(value){if(angular.isDefined(value)&&value!==null){var items=$scope.properties.availableValues;if(Array.isArray(items)){var foundItem=ctrl.findSelectedItem(items);ctrl.setSelectedValue(foundItem);}}});this.name=widgetNameFactory.getName('pbSelect');if(!$scope.properties.isBound('value')){$log.error('the pbSelect property named "value" need to be bound to a variable');}},template:'<div ng-class="{\n    \'form-horizontal\': properties.labelPosition === \'left\' && !properties.labelHidden,\n    \'row\': properties.labelPosition === \'top\' && !properties.labelHidden || properties.labelHidden\n    }">\n    <div class="form-group">\n        <label\n            ng-if="!properties.labelHidden"\n            ng-class="{ \'control-label--required\': properties.required }"\n            class="control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 12 }}">\n            {{ properties.label | uiTranslate }}\n        </label>\n        <div class="col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 0) }}" >\n            <select\n                class="form-control"\n                name="{{ctrl.name}}"\n                ng-model="properties.value"\n                ng-model-options="{ allowInvalid: true }"\n                ng-options="ctrl.getValue(option) as (ctrl.getLabel(option) | uiTranslate) for option in properties.availableValues"\n                ng-required="properties.required"\n                ng-disabled="properties.disabled">\n                <option style="display:none" value="">\n                    {{ properties.placeholder | uiTranslate }}\n                </option>\n            </select>\n            <div ng-messages="$form[ctrl.name].$dirty && $form[ctrl.name].$error " ng-messages-include="forms-generic-errors.html" role="alert"></div>\n        </div>\n    </div>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbText',function(){return{template:'<div\n ng-if="!properties.labelHidden"\n ng-class="{\n    \'form-horizontal\': properties.labelPosition === \'left\' ,\n    \'row\': properties.labelPosition === \'top\'\n    }">\n    <div class="form-group">\n        <label\n            class="control-label col-xs-{{ !properties.labelHidden ? properties.labelWidth : 12 }}" ng-bind-html="properties.label | uiTranslate">\n        </label>\n  <p ng-if="properties.allowHTML" class="form-control-static col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 0) }}" ng-bind-html="properties.text | uiTranslate"></p>\n  <p ng-if="!properties.allowHTML" class="form-control-static col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 0) }}" ng-bind="properties.text | uiTranslate"></p>\n    </div>\n</div>\n<p ng-if="properties.labelHidden && properties.allowHTML" class="text-{{ properties.alignment }}" ng-bind-html="properties.text | uiTranslate"></p>\n<p ng-if="properties.labelHidden && !properties.allowHTML" class="text-{{ properties.alignment }}" ng-bind="properties.text | uiTranslate"></p>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbInput',function(){return{controllerAs:'ctrl',controller:function PbInputCtrl($scope,$log,widgetNameFactory){'use strict';this.name=widgetNameFactory.getName('pbInput');if(!$scope.properties.isBound('value')){$log.error('the pbInput property named "value" need to be bound to a variable');}},template:'<div ng-class="{\n    \'form-horizontal\': properties.labelPosition === \'left\' && !properties.labelHidden,\n    \'row\': properties.labelPosition === \'top\' && !properties.labelHidden || properties.labelHidden\n    }">\n    <div class="form-group">\n        <label\n            ng-if="!properties.labelHidden"\n            ng-class="{ \'control-label--required\': properties.required }"\n            class="control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 12 }}" ng-bind-html="properties.label | uiTranslate">\n        </label>\n        <div class="col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 0) }}">\n            <input\n                type="{{properties.type}}"\n                class="form-control"\n                placeholder="{{ properties.placeholder | uiTranslate }}"\n                ng-model="properties.value"\n                ng-model-options="{ allowInvalid: true }"\n                name="{{ctrl.name}}"\n                ng-required="properties.required"\n                ng-minlength="properties.minLength"\n                ng-maxlength="properties.maxLength"\n                min="{{properties.min}}"\n                max="{{properties.max}}"\n                step="{{properties.step}}"\n                ng-readonly="properties.readOnly">\n            <div ng-messages="$form[ctrl.name].$dirty && $form[ctrl.name].$error " ng-messages-include="forms-generic-errors.html" role="alert"></div>\n        </div>\n    </div>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbButton',function(){return{controllerAs:'ctrl',controller:function PbButtonCtrl($scope,$http,$location,$log,$window,localStorageService,modalService){'use strict';var vm=this;this.action=function action(){if($scope.properties.action==='Remove from collection'){removeFromCollection();closeModal($scope.properties.closeOnSuccess);}else if($scope.properties.action==='Add to collection'){addToCollection();closeModal($scope.properties.closeOnSuccess);}else if($scope.properties.action==='Start process'){startProcess();}else if($scope.properties.action==='Submit task'){submitTask();}else if($scope.properties.action==='Open modal'){closeModal($scope.properties.closeOnSuccess);openModal($scope.properties.modalId);}else if($scope.properties.action==='Close modal'){closeModal(true);}else if($scope.properties.url){doRequest($scope.properties.action,$scope.properties.url);}};function openModal(modalId){modalService.open(modalId);}
function closeModal(shouldClose){if(shouldClose)
modalService.close();}
function removeFromCollection(){if($scope.properties.collectionToModify){if(!Array.isArray($scope.properties.collectionToModify)){throw'Collection property for widget button should be an array, but was '+$scope.properties.collectionToModify;}
var index=-1;if($scope.properties.collectionPosition==='First'){index=0;}else if($scope.properties.collectionPosition==='Last'){index=$scope.properties.collectionToModify.length-1;}else if($scope.properties.collectionPosition==='Item'){index=$scope.properties.collectionToModify.indexOf($scope.properties.removeItem);}
if(index!==-1){$scope.properties.collectionToModify.splice(index,1);}}}
function addToCollection(){if(!$scope.properties.collectionToModify){$scope.properties.collectionToModify=[];}
if(!Array.isArray($scope.properties.collectionToModify)){throw'Collection property for widget button should be an array, but was '+$scope.properties.collectionToModify;}
var item=angular.copy($scope.properties.valueToAdd);if($scope.properties.collectionPosition==='First'){$scope.properties.collectionToModify.unshift(item);}else{$scope.properties.collectionToModify.push(item);}}
function startProcess(){var id=getUrlParam('id');if(id){var prom=doRequest('POST','../API/bpm/process/'+id+'/instantiation',getUserParam()).then(function(){localStorageService.delete($window.location.href);});}else{$log.log('Impossible to retrieve the process definition id value from the URL');}}
function doRequest(method,url,params){vm.busy=true;var req={method:method,url:url,data:angular.copy($scope.properties.dataToSend),params:params};return $http(req).success(function(data,status){$scope.properties.dataFromSuccess=data;$scope.properties.responseStatusCode=status;$scope.properties.dataFromError=undefined;notifyParentFrame({message:'success',status:status,dataFromSuccess:data,dataFromError:undefined,responseStatusCode:status});if($scope.properties.targetUrlOnSuccess&&method!=='GET'){redirectIfNeeded();}
closeModal($scope.properties.closeOnSuccess);}).error(function(data,status){$scope.properties.dataFromError=data;$scope.properties.responseStatusCode=status;$scope.properties.dataFromSuccess=undefined;notifyParentFrame({message:'error',status:status,dataFromError:data,dataFromSuccess:undefined,responseStatusCode:status});}).finally(function(){vm.busy=false;});}
function redirectIfNeeded(){var iframeId=$window.frameElement?$window.frameElement.id:null;if(!iframeId||iframeId&&iframeId.indexOf('bonitaframe')!==0){$window.location.assign($scope.properties.targetUrlOnSuccess);}}
function notifyParentFrame(additionalProperties){if($window.parent!==$window.self){var dataToSend=angular.extend({},$scope.properties,additionalProperties);$window.parent.postMessage(JSON.stringify(dataToSend),'*');}}
function getUserParam(){var userId=getUrlParam('user');if(userId){return{'user':userId};}
return{};}
function getUrlParam(param){var paramValue=$location.absUrl().match('[//?&]'+param+'=([^&#]*)($|[&#])');if(paramValue){return paramValue[1];}
return'';}
function submitTask(){var id;id=getUrlParam('id');if(id){var params=getUserParam();params.assign=$scope.properties.assign;doRequest('POST','../API/bpm/userTask/'+getUrlParam('id')+'/execution',params).then(function(){localStorageService.delete($window.location.href);});}else{$log.log('Impossible to retrieve the task id value from the URL');}}},template:'<div class="text-{{ properties.alignment }}">\n    <button\n        ng-class="\'btn btn-\' + properties.buttonStyle"\n        ng-click="ctrl.action()"\n        type="button"\n        ng-disabled="properties.disabled || ctrl.busy" ng-bind-html="properties.label | uiTranslate"></button>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbDateTimePicker',function(){return{controllerAs:'ctrl',controller:function PbDateTimePickerCtrl($scope,$log,widgetNameFactory,$element,$locale,$bsDatepicker,moment){'use strict';this.name=widgetNameFactory.getName('pbDateTimepicker');this.firstDayOfWeek=($locale&&$locale.DATETIME_FORMATS&&$locale.DATETIME_FORMATS.FIRSTDAYOFWEEK)||0;$bsDatepicker.defaults.keyboard=false;var minuteStep=5;$scope.$watch('properties.value',function(){refreshInputs();},true);var refreshInputs=function(){var value=moment($scope.properties.value);if($scope.properties.value&&value.isValid()){$scope.properties.dateValue=formatToIso(moment({year:value.year(),month:value.month(),date:value.date()}));$scope.properties.timeValue=formatToIso(moment({hours:value.hours(),minutes:value.minutes(),seconds:value.seconds()}));}}
$scope.updateTimeValue=function(){if($scope.properties.timeValue&&moment($scope.properties.timeValue).isValid()){var time=moment($scope.properties.timeValue);var dateTime=moment($scope.properties.value);if(!dateTime.isValid()){dateTime=moment();}
$scope.properties.value=formatToIso(dateTime.hours(time.hours()).minutes(time.minutes()).seconds(time.seconds()));}else{$scope.properties.value=undefined;}};$scope.updateDateValue=function(){if($scope.properties.dateValue&&moment($scope.properties.dateValue).isValid()){var date=moment($scope.properties.dateValue);var dateTime=moment($scope.properties.timeValue);if($scope.properties.timeValue&&dateTime.isValid()){$scope.properties.value=formatToIso(dateTime.year(date.year()).month(date.month()).date(date.date()));}else{var now=moment();$scope.properties.value=formatToIso(date.hours(now.hours()).minutes(roundToMinuteStep(now.minute())).seconds(0));}}else{$scope.properties.value=undefined;}};var roundToMinuteStep=function(minutes){return Math.round(minutes/minuteStep)*minuteStep;};var formatToIso=function(moment){var isoFormat='YYYY-MM-DDTHH:mm:ss';if($scope.properties.withTimeZone){return moment.utc().format(isoFormat)+'Z';}else{return moment.format(isoFormat);}};this.setDateAndTimeToNow=function(){var now=moment();now.minute(roundToMinuteStep(now.minute())).second(0);$scope.properties.value=formatToIso(now);refreshInputs();};this.setDateToToday=function(){if($scope.properties.timeValue&&moment($scope.properties.timeValue).isValid()){var timeValue=moment($scope.properties.timeValue);$scope.properties.value=formatToIso(moment({hour:timeValue.hours(),minute:timeValue.minutes(),seconds:timeValue.seconds()}));}else{var now=moment();$scope.properties.value=formatToIso(now.minutes(roundToMinuteStep(now.minute())).seconds(0));}
refreshInputs();};this.openDatePicker=function(){$element.find('input')[0].focus();};this.openTimePicker=function(){$element.find('input')[1].focus();};if(!$scope.properties.isBound('value')){$log.error('the pbDateTimepicker property named "value" need to be bound to a variable');}},template:'<div ng-class="{\n    \'form-horizontal\': properties.labelPosition === \'left\' && !properties.labelHidden,\n    \'row\': properties.labelPosition === \'top\' && !properties.labelHidden || properties.labelHidden\n    }">\n    <div class="form-group">\n        <label\n            ng-if="!properties.labelHidden"\n            ng-class="{ \'control-label--required\': properties.required }"\n            class="control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 12 }}">\n            {{ properties.label | uiTranslate }}\n        </label>\n        <div ng-if="environment && environment.editor && properties.value" class="col-xs-12">\n            <i class="fa fa-link"/></i>\n            {{properties.value}}\n        </div>\n        <div\n            class="col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 0) }}\n            {{properties.inlineInput ? \'form-horizontal\' : \'\'}}">\n\n            <p ng-class="{\'col-xs-12 col-sm-6\': properties.inlineInput}"\n               class="input-group"\n               ng-style="properties.inlineInput ? {\'float\': \'left\'} : {}">\n                <input class="form-control"\n                       name="{{ctrl.name}}date"\n                       type="text"\n                       data-date-type="{{properties.withTimeZone ? \'iso\' : \'string\'}}"\n                       data-model-date-format="{{properties.withTimeZone ? null : \'yyyy-MM-ddTHH:mm:ss\'}}"\n                       placeholder="{{properties.placeholder | uiTranslate}}"\n                       ng-model="properties.dateValue"\n                       ng-change="updateDateValue()"\n                       ng-readonly="properties.readOnly"\n                       ng-required="properties.required"\n                       bs-datepicker\n                       data-container="body"\n                       data-autoclose="1"\n                       data-date-format="{{properties.dateFormat | uiTranslate}}"\n                       data-trigger="focus"\n                       data-start-week="{{ctrl.firstDayOfWeek}}">\n\n                <span class="input-group-btn">\n                <button ng-if="properties.showToday" type="button"\n                        class="btn btn-default today\n                               {{$form[ctrl.name+\'date\'].$dirty && (($form[ctrl.name+\'date\'].$error.date || $form[ctrl.name+\'date\'].$error.parse) ||\n                               (properties.required && $form[ctrl.name+\'date\'].$error.required)) ? \'btn-invalid\':\'\'}}"\n                        ng-click="ctrl.setDateToToday()"\n                        ng-disabled="properties.readOnly" ui-translate>\n                           {{properties.todayLabel || \'Today\' | uiTranslate}}\n                </button>\n                <button type="button"\n                        class="btn btn-default calendar\n                               {{$form[ctrl.name+\'date\'].$dirty && (($form[ctrl.name+\'date\'].$error.date || $form[ctrl.name+\'date\'].$error.parse) ||\n                               (properties.required && $form[ctrl.name+\'date\'].$error.required)) ? \'btn-invalid\':\'\'}}"\n                        ng-click="ctrl.openDatePicker()"\n                        ng-disabled="properties.readOnly">\n                    <i class="glyphicon glyphicon-calendar"></i>\n                </button>\n                </span>\n            </p>\n            <p ng-class="{\'col-xs-12 col-sm-6\': properties.inlineInput}"\n               class="input-group"\n               ng-style="properties.inlineInput ? {\'float\': \'left\'} : {}">\n                <input class="form-control"\n                       name="{{ctrl.name}}time"\n                       type="text"\n                       data-time-type="{{properties.withTimeZone ? \'iso\' : \'string\'}}"\n                       data-model-time-format="{{properties.withTimeZone ? null : \'yyyy-MM-ddTHH:mm:ss\'}}"\n                       placeholder="{{properties.timePlaceholder | uiTranslate}}"\n                       ng-model="properties.timeValue"\n                       ng-change="updateTimeValue()"\n                       ng-readonly="properties.readOnly"\n                       ng-required="properties.required"\n                       bs-timepicker\n                       data-container="body"\n                       data-autoclose="0"\n                       data-time-format="{{properties.timeFormat | uiTranslate}}"\n                       data-length="1"\n                       data-minute-step="5"\n                       data-second-step="5"\n                       data-round-display="true"\n                       data-arrow-behavior="picker"\n                       data-trigger="focus">\n\n                <span class="input-group-btn">\n                      <button ng-if="properties.showNow" type="button"\n                              class="btn btn-default now\n                               {{$form[ctrl.name+\'time\'].$dirty && (($form[ctrl.name+\'time\'].$error.date || $form[ctrl.name+\'time\'].$error.parse) ||\n                               (properties.required && $form[ctrl.name+\'time\'].$error.required)) ? \'btn-invalid\':\'\'}}"\n                              ng-disabled="properties.readOnly"\n                              ng-click="ctrl.setDateAndTimeToNow()" ui-translate>\n                          {{properties.nowLabel || \'Now\' | uiTranslate}}\n                      </button>\n                      <button type="button"\n                              class="btn btn-default timepicker\n                                {{$form[ctrl.name+\'time\'].$dirty && (($form[ctrl.name+\'time\'].$error.date || $form[ctrl.name+\'time\'].$error.parse) ||\n                                (properties.required && $form[ctrl.name+\'time\'].$error.required)) ? \'btn-invalid\':\'\'}}"\n                              ng-click="ctrl.openTimePicker()"\n                              ng-disabled="properties.readOnly">\n                        <i class="glyphicon glyphicon-time"></i>\n                      </button>\n                  </span>\n            </p>\n\n            <div ng-messages="($form[ctrl.name+\'time\'].$dirty && $form[ctrl.name+\'time\'].$error) ||\n                                      ($form[ctrl.name+\'date\'].$dirty && $form[ctrl.name +\'date\'].$error)"\n                 ng-messages-include="forms-generic-errors.html" role="alert">\n                <div ng-message="date" ng-if="!environment || !environment.editor" class="text-danger">\n                    {{ \'This is not a valid date or time\' | uiTranslate }}\n                </div>\n                <div ng-message="parse" ng-if="!environment || !environment.editor" class="text-danger">\n                    {{ \'This is not a valid date or time\' | uiTranslate }}\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbFormContainer',function(){return{template:''};});